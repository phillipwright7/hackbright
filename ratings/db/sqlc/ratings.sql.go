// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: ratings.sql

package db

import (
	"context"
	"database/sql"
)

const createRating = `-- name: CreateRating :one
INSERT INTO ratings (
    movie_id,
    user_id,
    score
) VALUES (
    $1, $2, $3
) RETURNING rating_id, movie_id, user_id, score
`

type CreateRatingParams struct {
	MovieID sql.NullInt32 `json:"movie_id"`
	UserID  sql.NullInt32 `json:"user_id"`
	Score   int32         `json:"score"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, createRating, arg.MovieID, arg.UserID, arg.Score)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.MovieID,
		&i.UserID,
		&i.Score,
	)
	return i, err
}

const deleteRating = `-- name: DeleteRating :exec
DELETE FROM ratings
WHERE movie_id = $1 AND user_id = $2
`

type DeleteRatingParams struct {
	MovieID sql.NullInt32 `json:"movie_id"`
	UserID  sql.NullInt32 `json:"user_id"`
}

func (q *Queries) DeleteRating(ctx context.Context, arg DeleteRatingParams) error {
	_, err := q.db.ExecContext(ctx, deleteRating, arg.MovieID, arg.UserID)
	return err
}

const getMovieRatings = `-- name: GetMovieRatings :many
SELECT rating_id, movie_id, user_id, score FROM ratings
WHERE movie_id = $1
`

func (q *Queries) GetMovieRatings(ctx context.Context, movieID sql.NullInt32) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, getMovieRatings, movieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rating
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.RatingID,
			&i.MovieID,
			&i.UserID,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRatingDetails = `-- name: GetRatingDetails :one
SELECT rating_id, movie_id, user_id, score FROM ratings
WHERE movie_id = $1 AND user_id = $2
`

type GetRatingDetailsParams struct {
	MovieID sql.NullInt32 `json:"movie_id"`
	UserID  sql.NullInt32 `json:"user_id"`
}

func (q *Queries) GetRatingDetails(ctx context.Context, arg GetRatingDetailsParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, getRatingDetails, arg.MovieID, arg.UserID)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.MovieID,
		&i.UserID,
		&i.Score,
	)
	return i, err
}

const getUserRatings = `-- name: GetUserRatings :many
SELECT score FROM ratings
WHERE user_id = $1
`

func (q *Queries) GetUserRatings(ctx context.Context, userID sql.NullInt32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getUserRatings, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var score int32
		if err := rows.Scan(&score); err != nil {
			return nil, err
		}
		items = append(items, score)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRating = `-- name: UpdateRating :one
UPDATE ratings
SET score = $1
WHERE movie_id = $2 AND user_id = $3
RETURNING rating_id, movie_id, user_id, score
`

type UpdateRatingParams struct {
	Score   int32         `json:"score"`
	MovieID sql.NullInt32 `json:"movie_id"`
	UserID  sql.NullInt32 `json:"user_id"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, updateRating, arg.Score, arg.MovieID, arg.UserID)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.MovieID,
		&i.UserID,
		&i.Score,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: owners.sql

package db

import (
	"context"
)

const createOwner = `-- name: CreateOwner :one
INSERT INTO owners (
    first_name,
    last_name,
    phone_number,
    email
) VALUES (
    $1, $2, $3, $4
) RETURNING owner_id, first_name, last_name, phone_number, email
`

type CreateOwnerParams struct {
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	PhoneNumber int32  `json:"phone_number"`
	Email       string `json:"email"`
}

func (q *Queries) CreateOwner(ctx context.Context, arg CreateOwnerParams) (Owner, error) {
	row := q.db.QueryRowContext(ctx, createOwner,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Email,
	)
	var i Owner
	err := row.Scan(
		&i.OwnerID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
	)
	return i, err
}

const deleteOwner = `-- name: DeleteOwner :exec
DELETE FROM owners
WHERE owner_id = $1
`

func (q *Queries) DeleteOwner(ctx context.Context, ownerID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOwner, ownerID)
	return err
}

const getAllOwners = `-- name: GetAllOwners :many
SELECT owner_id, first_name, last_name, phone_number, email FROM owners
`

func (q *Queries) GetAllOwners(ctx context.Context) ([]Owner, error) {
	rows, err := q.db.QueryContext(ctx, getAllOwners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Owner
	for rows.Next() {
		var i Owner
		if err := rows.Scan(
			&i.OwnerID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnerDetails = `-- name: GetOwnerDetails :one
SELECT owner_id, first_name, last_name, phone_number, email FROM owners
WHERE owner_id = $1
`

func (q *Queries) GetOwnerDetails(ctx context.Context, ownerID int32) (Owner, error) {
	row := q.db.QueryRowContext(ctx, getOwnerDetails, ownerID)
	var i Owner
	err := row.Scan(
		&i.OwnerID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
	)
	return i, err
}

const updateOwner = `-- name: UpdateOwner :exec
UPDATE owners
SET first_name = $2, last_name = $3, phone_number = $4, email = $5
WHERE owner_id = $1
`

type UpdateOwnerParams struct {
	OwnerID     int32  `json:"owner_id"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	PhoneNumber int32  `json:"phone_number"`
	Email       string `json:"email"`
}

func (q *Queries) UpdateOwner(ctx context.Context, arg UpdateOwnerParams) error {
	_, err := q.db.ExecContext(ctx, updateOwner,
		arg.OwnerID,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Email,
	)
	return err
}

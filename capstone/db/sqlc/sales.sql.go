// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: sales.sql

package db

import (
	"context"
	"database/sql"
)

const createSale = `-- name: CreateSale :one
INSERT INTO sales (
    car_id,
    owner_id
) VALUES (
    $1, $2
) RETURNING sale_id, car_id, owner_id
`

type CreateSaleParams struct {
	CarID   sql.NullInt32 `json:"car_id"`
	OwnerID sql.NullInt32 `json:"owner_id"`
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, createSale, arg.CarID, arg.OwnerID)
	var i Sale
	err := row.Scan(&i.SaleID, &i.CarID, &i.OwnerID)
	return i, err
}

const deleteSale = `-- name: DeleteSale :exec
DELETE FROM sales
WHERE sale_id = $1
`

func (q *Queries) DeleteSale(ctx context.Context, saleID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSale, saleID)
	return err
}

const getAllSales = `-- name: GetAllSales :many
SELECT sale_id, car_id, owner_id FROM sales
`

func (q *Queries) GetAllSales(ctx context.Context) ([]Sale, error) {
	rows, err := q.db.QueryContext(ctx, getAllSales)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sale
	for rows.Next() {
		var i Sale
		if err := rows.Scan(&i.SaleID, &i.CarID, &i.OwnerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSaleDetails = `-- name: GetSaleDetails :one
SELECT sale_id, car_id, owner_id FROM sales
WHERE sale_id = $1
`

func (q *Queries) GetSaleDetails(ctx context.Context, saleID int32) (Sale, error) {
	row := q.db.QueryRowContext(ctx, getSaleDetails, saleID)
	var i Sale
	err := row.Scan(&i.SaleID, &i.CarID, &i.OwnerID)
	return i, err
}

const updateSale = `-- name: UpdateSale :exec
UPDATE sales 
SET car_id = $2, owner_id = $3
WHERE sale_id = $1
`

type UpdateSaleParams struct {
	SaleID  int32         `json:"sale_id"`
	CarID   sql.NullInt32 `json:"car_id"`
	OwnerID sql.NullInt32 `json:"owner_id"`
}

func (q *Queries) UpdateSale(ctx context.Context, arg UpdateSaleParams) error {
	_, err := q.db.ExecContext(ctx, updateSale, arg.SaleID, arg.CarID, arg.OwnerID)
	return err
}

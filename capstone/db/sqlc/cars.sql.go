// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: cars.sql

package db

import (
	"context"
)

const createCar = `-- name: CreateCar :one
INSERT INTO cars (
    make,
    model,
    price,
    transmission,
    trim_level,
    color
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING car_id, make, model, price, transmission, trim_level, color
`

type CreateCarParams struct {
	Make         string `json:"make"`
	Model        string `json:"model"`
	Price        string `json:"price"`
	Transmission string `json:"transmission"`
	TrimLevel    string `json:"trim_level"`
	Color        string `json:"color"`
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, createCar,
		arg.Make,
		arg.Model,
		arg.Price,
		arg.Transmission,
		arg.TrimLevel,
		arg.Color,
	)
	var i Car
	err := row.Scan(
		&i.CarID,
		&i.Make,
		&i.Model,
		&i.Price,
		&i.Transmission,
		&i.TrimLevel,
		&i.Color,
	)
	return i, err
}

const deleteCar = `-- name: DeleteCar :exec
DELETE FROM cars 
WHERE car_id = $1
`

func (q *Queries) DeleteCar(ctx context.Context, carID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCar, carID)
	return err
}

const getAllCars = `-- name: GetAllCars :many
SELECT car_id, make, model, price, transmission, trim_level, color FROM cars
`

func (q *Queries) GetAllCars(ctx context.Context) ([]Car, error) {
	rows, err := q.db.QueryContext(ctx, getAllCars)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Car
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.CarID,
			&i.Make,
			&i.Model,
			&i.Price,
			&i.Transmission,
			&i.TrimLevel,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCarDetails = `-- name: GetCarDetails :one
SELECT car_id, make, model, price, transmission, trim_level, color FROM cars
WHERE car_id = $1
`

func (q *Queries) GetCarDetails(ctx context.Context, carID int32) (Car, error) {
	row := q.db.QueryRowContext(ctx, getCarDetails, carID)
	var i Car
	err := row.Scan(
		&i.CarID,
		&i.Make,
		&i.Model,
		&i.Price,
		&i.Transmission,
		&i.TrimLevel,
		&i.Color,
	)
	return i, err
}
